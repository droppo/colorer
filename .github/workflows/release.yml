name: Release

on:
  push:
    tags:
      - v[0-9]+.*

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/create-gh-release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}

  upload-assets:
    name: Release
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        include:
        - build: linux
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
          build_command: cargo build --release --target x86_64-unknown-linux-gnu
          script: |
            src=$(pwd)
            stage=$(mktemp -d)
            cp target/x86_64-unknown-linux-gnu/release/colorer $stage/
            cd $stage
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
            ASSET_NAME="colorer-$RELEASE_VERSION-x86_64-unknown-linux-gnu.tar.gz"
            ASSET_PATH="$src/$ASSET_NAME"
            echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
            tar czf $ASSET_PATH *

        - build: linux aarch64
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          # linker: gcc-aarch64-linux-gnu
          cross: true
          dep_command: sudo apt update && sudo apt install -y gcc-aarch64-linux-gnu
          build_command: "cargo build --release --target aarch64-unknown-linux-gnu"
          script: |
            src=$(pwd)
            stage=$(mktemp -d)
            cp target/aarch64-unknown-linux-gnu/release/colorer $stage/
            cd $stage
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
            ASSET_NAME="colorer-$RELEASE_VERSION-aarch64-unknown-linux-gnu.tar.gz"
            ASSET_PATH="$src/$ASSET_NAME"
            echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
            tar czf $ASSET_PATH *

        - build: linux amd64 deb
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
          dep_command: cargo install cargo-deb
          build_command: "cargo deb --target x86_64-unknown-linux-gnu"
          script: |
            stage=$(mktemp -d)
            cp target/x86_64-unknown-linux-gnu/debian/colorer*.deb $stage/
            cd $stage
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
            ASSET_NAME="colorer_$(echo $RELEASE_VERSION | sed 's/v//')_amd64.deb"
            ASSET_PATH="$(pwd)/$ASSET_NAME"
            echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV

        - build: linux aarch64 deb
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          # linker: gcc-aarch64-linux-gnu
          cross: true
          dep_command: sudo apt update && sudo apt install -y gcc-aarch64-linux-gnu && cargo install cargo-deb
          build_command: "cargo deb --target aarch64-unknown-linux-gnu"
          script: |
            stage=$(mktemp -d)
            cp target/aarch64-unknown-linux-gnu/debian/colorer*.deb $stage/
            cd $stage
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
            ASSET_NAME="colorer_$(echo $RELEASE_VERSION | sed 's/v//')_arm64.deb"
            ASSET_PATH="$(pwd)/$ASSET_NAME"
            echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV

        - build: linux amd64 rpm
          os: ubuntu-latest
          rust: stable
          target: x86_64-unknown-linux-gnu
          cross: false
          dep_command: sudo apt update && sudo apt install -y rpm && cargo install cargo-rpm
          build_command: "cp colorer_patterns/* .rpm && cargo rpm build --target x86_64-unknown-linux-gnu"
          script: |
            stage=$(mktemp -d)
            cp target/x86_64-unknown-linux-gnu/release/rpmbuild/RPMS/x86_64/colorer*.rpm $stage/
            ASSET_NAME="$(basename $(find target/x86_64-unknown-linux-gnu/release/rpmbuild/RPMS/x86_64/colorer*.rpm))"
            cd $stage
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
            ASSET_PATH="$(pwd)/$ASSET_NAME"
            echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV

        - build: linux aarch64 rpm
          os: ubuntu-latest
          rust: stable
          target: aarch64-unknown-linux-gnu
          # linker: gcc-aarch64-linux-gnu
          cross: true
          dep_command: sudo apt update && sudo apt install -y gcc-aarch64-linux-gnu rpm && cargo install cargo-rpm
          build_command: "cp colorer_patterns/* .rpm && cargo rpm build --target aarch64-unknown-linux-gnu"
          script: |
            stage=$(mktemp -d)
            cp target/aarch64-unknown-linux-gnu/release/rpmbuild/RPMS/aarch64/colorer*.rpm $stage/
            ASSET_NAME="$(basename $(find target/aarch64-unknown-linux-gnu/release/rpmbuild/RPMS/aarch64/colorer*.rpm))"
            cd $stage
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
            ASSET_PATH="$(pwd)/$ASSET_NAME"
            echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV

        - build: macos
          os: macos-11
          rust: stable
          target: x86_64-apple-darwin
          cross: false
          build_command: "cargo build --release"
          script: |
            src=$(pwd)
            stage=$(mktemp -d)
            cp target/release/colorer $stage/
            cd $stage
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
            ASSET_NAME="colorer-$RELEASE_VERSION-x86_64-apple-darwin.tar.gz"
            ASSET_PATH="$src/$ASSET_NAME"
            echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
            tar czf $ASSET_PATH *

        - build: aarch64 macos
          os: macos-11
          rust: stable
          target: aarch64-apple-darwin
          cross: false
          build_command: "cargo build --release"
          script: |
            src=$(pwd)
            stage=$(mktemp -d)
            cp target/release/colorer $stage/
            cd $stage
            RELEASE_VERSION=${GITHUB_REF#refs/tags/}
            ASSET_NAME="colorer-$RELEASE_VERSION-aarch64-apple-darwin.tar.gz"
            ASSET_PATH="$src/$ASSET_NAME"
            echo "ASSET_PATH=$ASSET_PATH" >> $GITHUB_ENV
            tar czf $ASSET_PATH *

    steps:

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Setup Cross Compilation
      if: matrix.cross
      run: |
        if [[ $(uname) == "Linux" ]]
        then
          mkdir .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config
        fi

    - name: Install Rust
      run: |
        rustup install ${{ matrix.rust }}
        rustup target add ${{ matrix.target }}
        rustup show

    - name: Install Dependencuies
      run: |
        ${{ matrix.dep_command }}

    - name: Build
      run: ${{ matrix.build_command }}

    - name: Package Artifacts
      run: ${{ matrix.script }}

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ env.ASSET_PATH }}
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
